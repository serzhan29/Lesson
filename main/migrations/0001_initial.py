# Generated by Django 4.2.15 on 2024-09-07 13:40

import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Название лекции:')),
                ('number', models.IntegerField(verbose_name='Номер лекции')),
                ('short_description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Краткое описание:')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Полное описание:')),
                ('video', models.FileField(blank=True, null=True, upload_to='videos/', verbose_name='Видео:')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/', verbose_name='Фото:')),
                ('audio', models.FileField(blank=True, null=True, upload_to='audio/', verbose_name='Аудио:')),
                ('presentation', models.FileField(blank=True, null=True, upload_to='presentations/', verbose_name='Презентация:')),
                ('url', models.URLField(blank=True, editable=False, null=True, verbose_name='Ссылка:')),
            ],
            options={
                'verbose_name': 'Дәрістер',
                'verbose_name_plural': 'Дәрістер',
                'ordering': ['number'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название урока:')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photos/', verbose_name='Фото:')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, verbose_name='Описание урока')),
            ],
            options={
                'verbose_name': 'Тақырып',
                'verbose_name_plural': 'Тақырып',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=200, verbose_name='Задание в Word:')),
                ('presentation', models.CharField(max_length=200, verbose_name='Задание в PowerPoint:')),
                ('url', models.URLField(blank=True, editable=False, null=True, verbose_name='Ссылка:')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.lesson')),
            ],
            options={
                'verbose_name': 'Қосымша материал',
                'verbose_name_plural': 'Қосымша материал',
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='main.topic'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Телефонный номер: ')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user_photos/', verbose_name='Фото: ')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='День рождение: ')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='lesson',
            unique_together={('topic', 'number')},
        ),
    ]
